---
export const prerender = true;

import Header from '@components/layout/Header.astro';
import Footer from '@components/layout/Footer.astro';
import SEOTags from '@components/seo/SEOTags.astro';
import CriticalCSS from '@components/CriticalCSS.astro';
import FontOptimization from '@components/FontOptimization.astro';
import FloatingCVButton from '@components/ui/FloatingCVButton.astro';
import { themeInitScript } from '@utils/theme-init';
import { useAstroI18n, getAlternateUrls } from '@/i18n';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
}

const { title, description, image, noindex } = Astro.props;
const { lang } = useAstroI18n(Astro.url);
const alternateUrls = getAlternateUrls(Astro.url.pathname);
const siteUrl = 'https://damianmeroni.dev';
---

<!doctype html>
<html lang={lang} class="h-full" data-theme="dark">
  <head>
    <SEOTags {title} {description} {image} {noindex} />

    <!-- Canonical URL -->
    <link rel="canonical" href={`${siteUrl}${Astro.url.pathname}`} />

    <!-- Hreflang tags for language alternates -->
    <link rel="alternate" hreflang="en" href={`${siteUrl}${alternateUrls.en}`} />
    <link rel="alternate" hreflang="es" href={`${siteUrl}${alternateUrls.es}`} />
    <link rel="alternate" hreflang="x-default" href={`${siteUrl}${alternateUrls.en}`} />

    <!-- Critical CSS inlined -->
    <CriticalCSS />

    <!-- Font optimization -->
    <FontOptimization />

    <!-- Theme initialization (before body to prevent flash) -->
    <script is:inline set:html={themeInitScript} />

    <!-- Import global CSS normally for Astro to process -->
    <style>
      @import '@styles/global.css';
    </style>
  </head>
  <body class="h-full">
    <Header />
    <main class="main-content">
      <slot />
    </main>
    <Footer />
    <FloatingCVButton />

    <!-- Load dynamic i18n for client-side language switching -->
    <script>
      import { dynamicI18n } from '@utils/dynamicI18n';

      // Make dynamicI18n globally available
      window.dynamicI18n = dynamicI18n;
    </script>

    <script>
      // Intersection Observer for scroll animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px',
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      // Observe all elements with animate-on-scroll class
      document.addEventListener('DOMContentLoaded', () => {
        const elements = document.querySelectorAll('.animate-on-scroll');
        elements.forEach((el) => observer.observe(el));
      });

      // Small Easter egg - Claude appreciation
      const konamiCode = [
        'ArrowUp',
        'ArrowUp',
        'ArrowDown',
        'ArrowDown',
        'ArrowLeft',
        'ArrowRight',
        'ArrowLeft',
        'ArrowRight',
        'KeyB',
        'KeyA',
      ];
      let konamiIndex = 0;

      document.addEventListener('keydown', (e) => {
        if (e.code === konamiCode[konamiIndex]) {
          konamiIndex++;
          if (konamiIndex === konamiCode.length) {
            console.log(
              'ðŸŽ‰ Thanks for the collaboration, Damian! Building your amazing site was a joy. - Claude'
            );
            const message = document.createElement('div');
            message.innerHTML = 'âœ¨ Built with care by Damian + a little help from Claude âœ¨';
            message.style.cssText = `
              position: fixed; top: 20px; right: 20px; z-index: 9999;
              background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
              color: white; padding: 12px 20px; border-radius: 8px;
              box-shadow: 0 4px 20px rgba(0,0,0,0.3);
              font-family: system-ui, -apple-system, sans-serif;
              font-size: 14px; animation: slideIn 0.5s ease-out;
            `;
            const style = document.createElement('style');
            style.textContent = `
              @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
              }
            `;
            document.head.appendChild(style);
            document.body.appendChild(message);
            setTimeout(() => message.remove(), 5000);
            konamiIndex = 0;
          }
        } else {
          konamiIndex = 0;
        }
      });
    </script>
  </body>
</html>

<style>
  .main-content {
    min-height: 100vh;
  }
</style>
