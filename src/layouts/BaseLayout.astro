---
export const prerender = true;

import '../styles/global.css';
import Header from '../components/layout/Header.astro';
import Footer from '../components/layout/Footer.astro';

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const {
  title = 'Damian - Full Stack Developer',
  description = 'Full-stack developer specializing in creating modern, responsive web applications',
  image = '/images/og-image.jpg',
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Preconnect to font provider -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.site)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.site)} />

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/icons/icon-32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/icons/icon-16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/icon-180.png" />
    <link rel="manifest" href="/icons/site.webmanifest" />

    <title>{title}</title>

    <!-- Theme initialization (before body to prevent flash) -->
    <script is:inline>
      // This script runs immediately to prevent theme flash
      const getTheme = () => {
        if (typeof localStorage !== 'undefined' && localStorage.theme) {
          return localStorage.theme;
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      };

      document.documentElement.setAttribute('data-theme', getTheme());
    </script>
  </head>
  <body class="h-full">
    <Header />
    <main class="main-content">
      <slot />
    </main>
    <Footer />

    <script>
      // Intersection Observer for scroll animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px',
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      // Observe all elements with animate-on-scroll class
      document.addEventListener('DOMContentLoaded', () => {
        const elements = document.querySelectorAll('.animate-on-scroll');
        elements.forEach((el) => observer.observe(el));
      });
    </script>
  </body>
</html>

<style>
  .main-content {
    padding-top: var(--header-height-mobile);
    min-height: 100vh;
  }

  @media (min-width: 768px) {
    .main-content {
      padding-top: var(--header-height);
    }
  }
</style>
