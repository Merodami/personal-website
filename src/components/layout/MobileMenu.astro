---
import { NAVIGATION_ITEMS, FEATURE_FLAGS } from '../../config/constants';

interface Props {
  currentPath: string;
}

const { currentPath } = Astro.props;

const isActive = (href: string) => {
  if (href === '/') {
    return currentPath === '/';
  }
  return currentPath.startsWith(href);
};

const navItems = NAVIGATION_ITEMS.filter((item) => {
  if (item.href === '/projects' && !FEATURE_FLAGS.showProjects) {
    return false;
  }
  return true;
});
---

<!-- Hamburger Button -->
<button id="menu-btn" class="menu-btn" aria-label="Open menu">
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M3 12h18M3 6h18M3 18h18" />
  </svg>
</button>

<!-- Portal for Full Screen Menu -->
<div id="mobile-menu-portal"></div>

<script define:vars={{ navItems, currentPath }}>
  // Create menu HTML
  const menuHTML = `
    <div id="mobile-menu" style="
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      background: var(--color-bg, #000);
      z-index: 2147483647;
      display: none;
    ">
      <div style="
        width: 100%;
        height: 100%;
        padding: 20px;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
      ">
        <button id="close-btn" style="
          align-self: flex-end;
          padding: 8px;
          background: none;
          border: none;
          cursor: pointer;
          color: var(--color-text, #fff);
          margin-bottom: 40px;
        " aria-label="Close menu">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M18 6L6 18M6 6l12 12" />
          </svg>
        </button>
        
        <nav style="
          display: flex;
          flex-direction: column;
          gap: 20px;
        ">
          ${navItems.map(item => `
            <a href="${item.href}" style="
              font-size: 24px;
              font-weight: 500;
              text-decoration: none;
              color: ${item.href === currentPath || (item.href !== '/' && currentPath.startsWith(item.href)) ? 'var(--color-primary, #ff0080)' : 'var(--color-text, #fff)'};
              padding: 10px 0;
            ">
              ${item.label}
            </a>
          `).join('')}
        </nav>
      </div>
    </div>
  `;

  // Wait for DOM
  document.addEventListener('DOMContentLoaded', () => {
    // Insert menu at body level
    document.body.insertAdjacentHTML('beforeend', menuHTML);
    
    const menuBtn = document.getElementById('menu-btn');
    const closeBtn = document.getElementById('close-btn');
    const menu = document.getElementById('mobile-menu');
    const links = menu?.querySelectorAll('a');
    
    function openMenu() {
      if (menu) {
        menu.style.display = 'block';
        document.body.style.overflow = 'hidden';
      }
    }
    
    function closeMenu() {
      if (menu) {
        menu.style.display = 'none';
        document.body.style.overflow = '';
      }
    }
    
    menuBtn?.addEventListener('click', openMenu);
    closeBtn?.addEventListener('click', closeMenu);
    
    links?.forEach(link => {
      link.addEventListener('click', closeMenu);
    });
    
    // Handle escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && menu?.style.display === 'block') {
        closeMenu();
      }
    });
  });
</script>

<style>
  /* Hamburger Button */
  .menu-btn {
    display: none;
    padding: 8px;
    background: none;
    border: none;
    cursor: pointer;
    color: inherit;
  }
  
  @media (max-width: 639px) {
    .menu-btn {
      display: block;
    }
  }
</style>