---
import TechLogo from '../icons/TechLogo.astro';

// Technologies to show in the background with their positions
const technologies = [
  // Frontend
  { name: 'React', key: 'react', color: '#61DAFB', size: 'lg' },
  { name: 'Vue', key: 'vue', color: '#4FC08D', size: 'md' },
  { name: 'TypeScript', key: 'typescript', color: '#3178C6', size: 'lg' },
  { name: 'JavaScript', key: 'javascript', color: '#F7DF1E', size: 'md' },
  { name: 'Angular', key: 'angular', color: '#DD0031', size: 'lg' },
  { name: 'Next.js', key: 'nextjs', color: '#000000', size: 'md' },
  { name: 'Astro', key: 'astro', color: '#FF5D01', size: 'lg' },
  { name: 'Tailwind', key: 'tailwindcss', color: '#06B6D4', size: 'md' },

  // Backend & Tools
  { name: 'Node.js', key: 'nodejs', color: '#339933', size: 'lg' },
  { name: 'Docker', key: 'docker', color: '#2496ED', size: 'md' },
  { name: 'Git', key: 'git', color: '#F05032', size: 'sm' },
  { name: 'AWS', key: 'aws', color: '#FF9900', size: 'lg' },
  { name: 'PostgreSQL', key: 'postgresql', color: '#4169E1', size: 'md' },
  { name: 'MongoDB', key: 'mongodb', color: '#47A248', size: 'md' },
  { name: 'Redis', key: 'redis', color: '#DC382D', size: 'sm' },
  { name: 'Jest', key: 'jest', color: '#C21325', size: 'sm' },
  { name: 'Cypress', key: 'cypress', color: '#17202C', size: 'md' },
  { name: 'GitHub', key: 'github', color: '#181717', size: 'md' },
  { name: 'Vitest', key: 'vitest', color: '#6E9F18', size: 'sm' },
  { name: 'Playwright', key: 'playwright', color: '#2EAD33', size: 'md' },
  { name: 'Redux', key: 'redux', color: '#764ABC', size: 'sm' },
  { name: 'Fastify', key: 'fastify', color: '#000000', size: 'sm' },
];

// Generate random positions for each technology
const techItems = technologies.map((tech, index) => ({
  ...tech,
  id: `tech-${index}`,
  // Random position between 0-100%
  x: Math.random() * 100,
  y: Math.random() * 100,
  // Random animation delay
  animationDelay: Math.random() * 20,
  // Random animation duration
  animationDuration: 15 + Math.random() * 10,
  // Random initial rotation
  rotation: Math.random() * 360,
}));

// Size mappings - reduced by half
const sizeMap = {
  sm: 15,
  md: 20,
  lg: 25,
};
---

<div class="tech-background" id="tech-background">
  {
    techItems.map((tech) => (
      <div
        class={`tech-item tech-${tech.size}`}
        data-tech={tech.name}
        style={`
          left: ${tech.x}%;
          top: ${tech.y}%;
          animation-delay: ${tech.animationDelay}s;
          animation-duration: ${tech.animationDuration}s;
          --rotation: ${tech.rotation}deg;
        `}
      >
        <div
          class={`tech-logo-wrapper ${['github', 'nextjs', 'fastify'].includes(tech.key) ? 'dark-logo' : ''}`}
        >
          <TechLogo name={tech.key} size={sizeMap[tech.size || 'md']} className="floating-logo" />
        </div>
      </div>
    ))
  }
</div>

<style>
  .tech-background {
    position: absolute;
    inset: 0;
    overflow: hidden;
    pointer-events: none;
    z-index: 0;
  }

  .tech-item {
    position: absolute;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    opacity: 0;
    transform: translate(-50%, -50%) rotate(var(--rotation));
    animation: float-tech linear infinite;
    transition: transform 0.3s ease;
  }

  .tech-logo-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    opacity: 0.6;
  }

  /* Hover effects */
  .tech-background:hover .tech-item {
    animation-play-state: paused;
  }

  .tech-item:hover {
    z-index: 10;
    pointer-events: auto;
  }

  .tech-item:hover .tech-logo-wrapper {
    opacity: 1;
    transform: scale(1.2);
  }

  /* Floating animation */
  @keyframes float-tech {
    0% {
      opacity: 0;
      transform: translate(-50%, -50%) rotate(var(--rotation)) translateY(20px);
    }
    2% {
      opacity: 0.7;
    }
    50% {
      opacity: 0.85;
      transform: translate(-50%, -50%) rotate(calc(var(--rotation) + 180deg)) translateY(-20px);
    }
    98% {
      opacity: 0.7;
    }
    100% {
      opacity: 0;
      transform: translate(-50%, -50%) rotate(calc(var(--rotation) + 360deg)) translateY(20px);
    }
  }

  /* Dark theme adjustments */
  [data-theme='dark'] .tech-logo-wrapper {
    opacity: 0.5;
  }

  /* Light theme adjustments for dark logos */
  :global([data-theme='light'] .dark-logo) {
    background-color: #f3f4f6;
    border-radius: 8px;
    padding: 4px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .tech-item {
      display: none;
    }

    /* Show fewer items on mobile */
    .tech-item:nth-child(-n + 10) {
      display: flex;
    }
  }
</style>

<script>
  // Add parallax effect on mouse move
  const techBg = document.getElementById('tech-background');
  const techItems = techBg?.querySelectorAll('.tech-item') as NodeListOf<HTMLElement>;

  if (techBg && techItems.length > 0) {
    let mouseX = 0;
    let mouseY = 0;
    let currentX = 0;
    let currentY = 0;

    // Smooth animation using requestAnimationFrame
    function animate() {
      currentX += (mouseX - currentX) * 0.05;
      currentY += (mouseY - currentY) * 0.05;

      techItems.forEach((item, index) => {
        const depth = (index % 3) + 1; // Create 3 layers of depth
        const moveX = (currentX * depth) / 50;
        const moveY = (currentY * depth) / 50;

        item.style.transform = `translate(calc(-50% + ${moveX}px), calc(-50% + ${moveY}px)) rotate(var(--rotation))`;
      });

      requestAnimationFrame(animate);
    }

    // Update mouse position
    document.addEventListener('mousemove', (e) => {
      mouseX = (e.clientX - window.innerWidth / 2) / window.innerWidth;
      mouseY = (e.clientY - window.innerHeight / 2) / window.innerHeight;
    });

    // Start animation
    animate();
  }
</script>
