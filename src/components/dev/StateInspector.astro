---
// Only render in development
const isDev = import.meta.env.DEV;
---

{
  isDev && (
    <div id="state-inspector" class="state-inspector">
      <button class="toggle-btn" aria-label="Toggle state inspector">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M12 2L2 7L12 12L22 7L12 2Z" />
          <path d="M2 17L12 22L22 17" />
          <path d="M2 12L12 17L22 12" />
        </svg>
      </button>
      <div class="content">
        <h3>State Inspector</h3>
        <pre id="state-display" />
        <div class="actions">
          <button id="toggle-theme-btn">Toggle Theme</button>
          <button id="refresh-state-btn">Refresh</button>
        </div>
      </div>
    </div>
  )
}

<style>
  .state-inspector {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.9);
    color: #fff;
    border: 1px solid #333;
    border-radius: 8px;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 12px;
    z-index: 9999;
    max-width: 400px;
    transition: all 0.3s ease;
  }

  .state-inspector.collapsed .content {
    display: none;
  }

  .toggle-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: #333;
    border: none;
    color: #fff;
    padding: 4px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .toggle-btn:hover {
    background: #444;
  }

  .content {
    padding: 20px;
    padding-top: 40px;
  }

  h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #61dafb;
  }

  pre {
    background: #1a1a1a;
    padding: 10px;
    border-radius: 4px;
    overflow-x: auto;
    max-height: 300px;
    overflow-y: auto;
    margin: 0 0 10px 0;
  }

  .actions {
    display: flex;
    gap: 10px;
  }

  .actions button {
    flex: 1;
    padding: 6px 12px;
    background: #333;
    border: 1px solid #444;
    color: #fff;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
  }

  .actions button:hover {
    background: #444;
  }

  @media (max-width: 640px) {
    .state-inspector {
      bottom: 10px;
      right: 10px;
      left: 10px;
      max-width: none;
    }
  }
</style>

<script>
  // Only run in development and in browser
  if (typeof window !== 'undefined' && import.meta.env.DEV) {
    const STORAGE_KEY = 'app-storage';

    const inspector = document.getElementById('state-inspector');
    const toggleBtn = inspector?.querySelector('.toggle-btn');
    const stateDisplay = document.getElementById('state-display');
    const toggleThemeBtn = document.getElementById('toggle-theme-btn');
    const refreshBtn = document.getElementById('refresh-state-btn');

    function updateStateDisplay() {
      if (!stateDisplay) return;

      try {
        // Get the Zustand state from localStorage
        const stored = localStorage.getItem(STORAGE_KEY);
        const state = stored ? JSON.parse(stored) : { state: {} };

        // Add current theme from DOM
        const currentTheme = document.documentElement.getAttribute('data-theme');

        const displayData = {
          zustandState: state.state,
          currentDOMTheme: currentTheme,
          localStorage: {
            [STORAGE_KEY]: state,
          },
        };

        stateDisplay.textContent = JSON.stringify(displayData, null, 2);
      } catch (error) {
        stateDisplay.textContent = `Error: ${error.message}`;
      }
    }

    function toggleTheme() {
      try {
        const stored = localStorage.getItem(STORAGE_KEY) || '{"state":{}}';
        const parsed = JSON.parse(stored);
        const currentTheme = parsed.state?.theme || 'dark';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

        parsed.state.theme = newTheme;
        localStorage.setItem(STORAGE_KEY, JSON.stringify(parsed));
        document.documentElement.setAttribute('data-theme', newTheme);

        // Dispatch event
        window.dispatchEvent(new CustomEvent('theme-change', { detail: { theme: newTheme } }));
      } catch (error) {
        console.error('Failed to toggle theme:', error);
      }
    }

    // Toggle inspector visibility
    toggleBtn?.addEventListener('click', () => {
      inspector?.classList.toggle('collapsed');
    });

    // Toggle theme button
    toggleThemeBtn?.addEventListener('click', () => {
      toggleTheme();
      setTimeout(updateStateDisplay, 100); // Update after theme change
    });

    // Refresh state button
    refreshBtn?.addEventListener('click', updateStateDisplay);

    // Initial state display
    updateStateDisplay();

    // Listen for theme changes
    window.addEventListener('theme-change', () => {
      updateStateDisplay();
    });

    // Update on storage changes
    window.addEventListener('storage', (e) => {
      if (e.key === STORAGE_KEY) {
        updateStateDisplay();
      }
    });
  }
</script>
